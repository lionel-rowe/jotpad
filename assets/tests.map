{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","jotpad/tests/helpers/ember-simple-auth.js","jotpad/tests/integration/helpers/notes-test.js","jotpad/tests/lint/app.lint-test.js","jotpad/tests/lint/templates.template.lint-test.js","jotpad/tests/lint/tests.lint-test.js","jotpad/tests/test-helper.js","jotpad/tests/unit/adapters/application-test.js","jotpad/tests/unit/controllers/notes-test.js","jotpad/tests/unit/models/note-test.js","jotpad/tests/unit/routes/notes-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define(\"jotpad/tests/helpers/ember-simple-auth\", [\"exports\", \"ember-simple-auth/authenticators/test\"], function (_exports, _test) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.authenticateSession = authenticateSession;\n  _exports.currentSession = currentSession;\n  _exports.invalidateSession = invalidateSession;\n  const TEST_CONTAINER_KEY = 'authenticator:test';\n\n  function ensureAuthenticator(app, container) {\n    const authenticator = container.lookup(TEST_CONTAINER_KEY);\n\n    if (!authenticator) {\n      app.register(TEST_CONTAINER_KEY, _test.default);\n    }\n  }\n\n  function authenticateSession(app, sessionData) {\n    const {\n      __container__: container\n    } = app;\n    const session = container.lookup('service:session');\n    ensureAuthenticator(app, container);\n    session.authenticate(TEST_CONTAINER_KEY, sessionData);\n    return app.testHelpers.wait();\n  }\n\n  function currentSession(app) {\n    return app.__container__.lookup('service:session');\n  }\n\n  function invalidateSession(app) {\n    const session = app.__container__.lookup('service:session');\n\n    if (session.get('isAuthenticated')) {\n      session.invalidate();\n    }\n\n    return app.testHelpers.wait();\n  }\n});","define(\"jotpad/tests/integration/helpers/notes-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Helper | notes', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it renders', async function (assert) {\n      this.set('inputValue', '1234');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"o/7D3Btz\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[27,\\\"notes\\\",[[23,[\\\"inputValue\\\"]]],null],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), '1234');\n    });\n  });\n});","define(\"jotpad/tests/lint/app.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | app');\n  QUnit.test('adapters/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('adapters/user.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/user.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('authenticators/oauth2.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'authenticators/oauth2.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('controllers/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/application.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('controllers/login.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/login.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('controllers/notes.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/notes.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('helpers/DEPRECATED_formatMarkdown.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/DEPRECATED_formatMarkdown.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('helpers/formatDate.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/formatDate.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('helpers/safeCssBg.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/safeCssBg.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('models/note.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'models/note.js should pass ESLint\\n\\n3:10 - \\'htmlSafe\\' is defined but never used. (no-unused-vars)\\n7:18 - Use import { debounce } from \\'@ember/runloop\\'; instead of using Ember.run.debounce (ember/new-module-imports)\\n7:18 - \\'Ember\\' is not defined. (no-undef)');\n  });\n  QUnit.test('models/user.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/user.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/application.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/login.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/login.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/note.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/note.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/notes.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/notes.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('serializers/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/application.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('services/current-user.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/current-user.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('utils/formatMarkdown.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'utils/formatMarkdown.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('utils/safeURI.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'utils/safeURI.js should pass ESLint\\n\\n');\n  });\n});","define(\"jotpad/tests/lint/templates.template.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('TemplateLint');\n  QUnit.test('jotpad/templates/application.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'jotpad/templates/application.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('jotpad/templates/head.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'jotpad/templates/head.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('jotpad/templates/login.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'jotpad/templates/login.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('jotpad/templates/note.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'jotpad/templates/note.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('jotpad/templates/notes.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'jotpad/templates/notes.hbs should pass TemplateLint.\\n\\n');\n  });\n});","define(\"jotpad/tests/lint/tests.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | tests');\n  QUnit.test('integration/helpers/notes-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/notes-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/adapters/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/application-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/controllers/notes-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/notes-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/models/note-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/note-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/notes-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/notes-test.js should pass ESLint\\n\\n');\n  });\n});","define(\"jotpad/tests/test-helper\", [\"jotpad/app\", \"jotpad/config/environment\", \"@ember/test-helpers\", \"ember-qunit\"], function (_app, _environment, _testHelpers, _emberQunit) {\n  \"use strict\";\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n  (0, _emberQunit.start)();\n});","define(\"jotpad/tests/unit/adapters/application-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Adapter | application', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let adapter = this.owner.lookup('adapter:application');\n      assert.ok(adapter);\n    });\n  });\n});","define(\"jotpad/tests/unit/controllers/notes-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Controller | notes', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:notes');\n      assert.ok(controller);\n    });\n  });\n});","define(\"jotpad/tests/unit/models/note-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Model | note', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let model = store.createRecord('note', {});\n      assert.ok(model);\n    });\n  });\n});","define(\"jotpad/tests/unit/routes/notes-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | notes', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:notes');\n      assert.ok(route);\n    });\n  });\n});","define('jotpad/config/environment', [], function() {\n  var prefix = 'jotpad';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('jotpad/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}